How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It allows easy comparison of the changes in a file so you can zero in on 
    where the differences are, rather than having to scan each line manually.

How could having easy access to the entire history of a file make you a more 
efficient programmer in the long term?

    It's easier to go back and look at changes or restore previous versions
    should there be catastrophic failures.

What do you think are the pros and cons of manually choosing when to create a 
commit, like you do in Git, vs having versions automatically saved, like Google 
Docs does?

    Manually choosing when to save is more likely to end up in lost data, but
    automatically saving will end up with a lot of data that doesn't necessarily
    make sense.

    Ultimately the best answer is to do both, e.g. save local changes
    automatically, but store global changes (e.g. commits, branch merges)
    manually.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    The systems were created with different purposes in mind. Git was
    specifically created with the idea of tracking multiple files at once.
    Google Docs was specifically created with the idea of tracking a user's
    simple file edits. In addition, I imagine Google wanted to keep data usage
    lower and so kept to only tracking one file at a time.

How can you use the commands git log and git diff to view the history of files?

    By using these commands while in a git repository.

How might using version control make you more confident to make changes that
could break something?

    It's easier to go back and find where the bug was introduced as well as
    revert to versions without the bug.

Now that you have your workspace set up, what do you want to try using Git for?

    Making it easier to revert when I introduce a bug/ investigate what caused
    the bug.