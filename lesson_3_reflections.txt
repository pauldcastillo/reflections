When would you want to use a remote repository rather than keeping all your work
local?

    When collaborating with others or to store code outside of your computer.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    There might be changes on the remote repository you don't want on your
    branch yet. Although you shouldn't really work on master.

Describe the differences between forks, clones, and branches. When would you
use one instead of another?

    Forks are copies of repositories you want to edit without changing the
    original, usually one you don't have authorization to edit. Clones are
    copies of repositories you put on your machine to make edits to for later
    merging with the main repository. Branches are copies of repository made
    locally (though not necessarily on your own machine, could be GitHub) for
    merging later.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    You can compare your branch to the state of the remote repository.

How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

    Using a remote copy on a shared disk would probably be the best option,
    but the problem with that would be sharing files. Either only one person
    can have a file open at a time, or whatever the most recently saved version
    would be the only version, which presents problems when it comes to merging
    slightly different files.

When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?

    I would never make changes directly into master unless I was not
    collaborating with anyone and never planned to. I suppose it's simpler to
    commit directly to master, but the additional control and rewinding
    capability is one of the best advantages of git, and it's not exactly
    a ton of effort to make a separate branch.